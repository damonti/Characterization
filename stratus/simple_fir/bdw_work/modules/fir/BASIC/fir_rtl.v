// Generated by stratus_hls 19.25-s100  (93142.260418)
// Wed Sep  7 16:24:57 2022
// from fir.cc

`timescale 1ps / 1ps

      
module fir(clk, rst, coeffs_table_0, coeffs_table_1, coeffs_table_2, coeffs_table_3, coeffs_table_4, coeffs_table_5, coeffs_table_6, coeffs_table_7, din_busy, din_vld, din_data, dout_busy, dout_vld, dout_data);

      input clk;
      input rst;
      input [7:0] coeffs_table_0;
      input [7:0] coeffs_table_1;
      input [7:0] coeffs_table_2;
      input [7:0] coeffs_table_3;
      input [7:0] coeffs_table_4;
      input [7:0] coeffs_table_5;
      input [7:0] coeffs_table_6;
      input [7:0] coeffs_table_7;
      input din_vld;
      input [7:0] din_data;
      input dout_busy;
      output din_busy;
      output dout_vld;
      output [10:0] dout_data;
      reg [10:0] dout_data;
      reg dout_m_req_m_prev_trig_req;
      reg dout_m_unacked_req;
      reg din_m_unvalidated_req;
      reg[3:0] global_state_next;
      reg gs_ctrl4;
      reg gs_ctrl3;
      reg gs_ctrl2;
      reg[1:0] gs_ctrl1;
      reg[1:0] gs_ctrl0;
      reg dout_m_req_m_trig_req;
      reg din_m_busy_req_0;
      reg[3:0] sreg_1;
      reg[3:0] global_state;
      reg stall0;
      wire fir_N_Muxb_1_2_11_4_1_out1;
      wire fir_gen_busy_r_1_2_in1;
      wire fir_gen_busy_r_1_2_in2;
      wire fir_gen_busy_r_1_2_in3;
      wire[2:0] fir_gen_busy_r_1_2_out1;
      wire fir_Xor_1Ux1U_1U_1_4_in1;
      wire fir_Or_1Ux1U_1U_4_5_in2;
      wire fir_Xor_1Ux1U_1U_1_4_out1;
      wire fir_Or_1Ux1U_1U_4_5_out1;
      wire fir_And_1Ux1U_1U_1_6_in2;
      wire fir_And_1Ux1U_1U_1_6_in1;
      wire fir_And_1Ux1U_1U_1_6_out1;
      wire fir_Xor_1Ux1U_1U_1_4_in2;
      wire fir_Not_1U_1U_1_7_out1;
      wire[10:0] fir_Add_11Ux11U_11U_4_14_out1;
      reg[2:0] fir_Add_3U_4_4_8_in1;
      wire[2:0] fir_Add_3U_4_4_8_out1;
      wire[2:0] fir_Add_3U_4_4_9_out1;
      reg[2:0] fir_Add_3Ux1U_4U_4_11_in2;
      wire fir_Add_3Ux1U_4U_4_11_in1;
      wire[3:0] fir_Add_3Ux1U_4U_4_11_out1;
      wire[2:0] fir_Add_3U_4_4_9_in1;
      wire fir_LessThan_1U_10_4_10_out1;
      wire[10:0] fir_Mul_8Ux8U_11U_4_13_out1;
      reg[2:0] s_reg_19;
      wire[7:0] fir_N_Mux_8_8_12_4_12_out1;
      reg[7:0] shift_reg_DIN;
      reg shift_reg_CE;
      reg shift_reg_RW;
      reg[2:0] shift_reg_in1;
      wire[7:0] shift_reg_out1;

         fir_RAM_8X8_1 shift_reg(
                         .DIN( shift_reg_DIN ),
                         .CE( shift_reg_CE ),
                         .RW( shift_reg_RW ),
                         .in1( shift_reg_in1 ),
                         .out1( shift_reg_out1 ),
                         .clk( clk )
                       );

         fir_N_Mux_8_8_12_4 fir_N_Mux_8_8_12_4_12(
                              .in9( coeffs_table_7 ),
                              .in8( coeffs_table_6 ),
                              .in7( coeffs_table_5 ),
                              .in6( coeffs_table_4 ),
                              .in5( coeffs_table_3 ),
                              .in4( coeffs_table_2 ),
                              .in3( coeffs_table_1 ),
                              .in2( coeffs_table_0 ),
                              .ctrl1( s_reg_19 ),
                              .out1( fir_N_Mux_8_8_12_4_12_out1 )
                            );

         fir_Mul_8Ux8U_11U_4 fir_Mul_8Ux8U_11U_4_13(
                               .in2( fir_N_Mux_8_8_12_4_12_out1 ),
                               .in1( shift_reg_out1 ),
                               .out1( fir_Mul_8Ux8U_11U_4_13_out1 )
                             );

         fir_LessThan_1U_10_4 fir_LessThan_1U_10_4_10(
                                .in1( fir_Add_3U_4_4_9_in1 ),
                                .out1( fir_LessThan_1U_10_4_10_out1 )
                              );

         fir_Add_3Ux1U_4U_4 fir_Add_3Ux1U_4U_4_11(
                              .in2( fir_Add_3Ux1U_4U_4_11_in2 ),
                              .in1( fir_Add_3Ux1U_4U_4_11_in1 ),
                              .out1( fir_Add_3Ux1U_4U_4_11_out1 )
                            );

         fir_Add_3U_4_4 fir_Add_3U_4_4_9(
                          .in1( fir_Add_3U_4_4_9_in1 ),
                          .out1( fir_Add_3U_4_4_9_out1 )
                        );

         fir_Add_3U_4_4 fir_Add_3U_4_4_8(
                          .in1( fir_Add_3U_4_4_8_in1 ),
                          .out1( fir_Add_3U_4_4_8_out1 )
                        );

         fir_Add_11Ux11U_11U_4 fir_Add_11Ux11U_11U_4_14(
                                 .in2( fir_Mul_8Ux8U_11U_4_13_out1 ),
                                 .in1( dout_data ),
                                 .out1( fir_Add_11Ux11U_11U_4_14_out1 )
                               );

         fir_Not_1U_1U_1 fir_Not_1U_1U_1_7(
                           .in1( fir_Xor_1Ux1U_1U_1_4_in2 ),
                           .out1( fir_Not_1U_1U_1_7_out1 )
                         );

         fir_And_1Ux1U_1U_1 fir_And_1Ux1U_1U_1_6(
                              .in2( fir_And_1Ux1U_1U_1_6_in2 ),
                              .in1( fir_And_1Ux1U_1U_1_6_in1 ),
                              .out1( fir_And_1Ux1U_1U_1_6_out1 )
                            );

         fir_Or_1Ux1U_1U_4 fir_Or_1Ux1U_1U_4_5(
                             .in2( fir_Or_1Ux1U_1U_4_5_in2 ),
                             .in1( fir_Xor_1Ux1U_1U_1_4_out1 ),
                             .out1( fir_Or_1Ux1U_1U_4_5_out1 )
                           );

         fir_Xor_1Ux1U_1U_1 fir_Xor_1Ux1U_1U_1_4(
                              .in2( fir_Xor_1Ux1U_1U_1_4_in2 ),
                              .in1( fir_Xor_1Ux1U_1U_1_4_in1 ),
                              .out1( fir_Xor_1Ux1U_1U_1_4_out1 )
                            );

         fir_gen_busy_r_1 fir_gen_busy_r_1_2(
                            .in1( fir_gen_busy_r_1_2_in1 ),
                            .in2( fir_gen_busy_r_1_2_in2 ),
                            .in3( fir_gen_busy_r_1_2_in3 ),
                            .out1( fir_gen_busy_r_1_2_out1 )
                          );

         fir_N_Muxb_1_2_11_4 fir_N_Muxb_1_2_11_4_1(
                               .in3( fir_gen_busy_r_1_2_in1 ),
                               .in2( fir_gen_busy_r_1_2_in3 ),
                               .ctrl1( fir_gen_busy_r_1_2_in2 ),
                               .out1( fir_N_Muxb_1_2_11_4_1_out1 )
                             );

         // resource: mux_11bx3i1c
         // resource: regr_en_11
         always @(posedge clk)
          begin :drive_dout_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd12:                      begin
                        dout_data <= 11'd0000;
                     end
                     
                     4'd13:                      begin
                        if (sreg_1[3]) begin
                           dout_data <= {4'b0000, fir_Add_11Ux11U_11U_4_14_out1[10:4]};
                        end
                        else begin
                           dout_data <= fir_Add_11Ux11U_11U_4_14_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge clk)
          begin :drive_din_m_busy_req_0
            if (rst == 1'b0) begin
               din_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd10:                         begin
                           if (fir_LessThan_1U_10_4_10_out1) begin
                           end
                           else begin
                              din_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        4'd11:                         begin
                           din_m_busy_req_0 <= 1'd1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd13:                         begin
                           if (sreg_1[3]) begin
                              dout_m_req_m_trig_req <= fir_Not_1U_1U_1_7_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(fir_gen_busy_r_1_2_out1[0] or fir_And_1Ux1U_1U_1_6_out1 or global_state)
          begin :drive_stall0
            case (global_state) 

               4'd11:                begin
                  stall0 = fir_gen_busy_r_1_2_out1[0];
               end
               
               4'd15:                begin
                  stall0 = fir_And_1Ux1U_1U_1_6_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_3bx3i1c
         // resource: regr_en_3
         always @(posedge clk)
          begin :drive_s_reg_19
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd08, 4'd12, 4'd15:                      begin
                        s_reg_19 <= 3'd0;
                     end
                     
                     4'd09:                      begin
                        s_reg_19 <= fir_Add_3U_4_4_9_out1;
                     end
                     
                     4'd14:                      begin
                        s_reg_19 <= sreg_1[2:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_3bx11i8c
         always @(s_reg_19 or fir_Add_3U_4_4_8_out1 or sreg_1[2:0] or global_state)
          begin :drive_shift_reg_in1
            case (global_state) 

               4'd01:                begin
                  shift_reg_in1 = 3'd1;
               end
               
               4'd02:                begin
                  shift_reg_in1 = 3'd2;
               end
               
               4'd03:                begin
                  shift_reg_in1 = 3'd3;
               end
               
               4'd04:                begin
                  shift_reg_in1 = 3'd4;
               end
               
               4'd05:                begin
                  shift_reg_in1 = 3'd5;
               end
               
               4'd06:                begin
                  shift_reg_in1 = 3'd6;
               end
               
               4'd07, 4'd11:                begin
                  shift_reg_in1 = 3'd7;
               end
               
               4'd08, 4'd10, 4'd15:                begin
                  shift_reg_in1 = fir_Add_3U_4_4_8_out1;
               end
               
               4'd09:                begin
                  shift_reg_in1 = s_reg_19;
               end
               
               4'd14:                begin
                  shift_reg_in1 = sreg_1[2:0];
               end
               
               default:                begin
                  shift_reg_in1 = 3'd0;
               end
               
            endcase

         end

         // resource: mux_8bx3i1c
         always @(din_data or shift_reg_out1 or gs_ctrl0)
          begin :drive_shift_reg_DIN
            case (gs_ctrl0) 

               2'd1:                begin
                  shift_reg_DIN = shift_reg_out1;
               end
               
               2'd2:                begin
                  shift_reg_DIN = din_data;
               end
               
               default:                begin
                  shift_reg_DIN = 8'd000;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or fir_LessThan_1U_10_4_10_out1 or gs_ctrl1)
          begin :drive_shift_reg_CE
            if (stall0) begin
               shift_reg_CE = 1'b0;
            end
            else begin
               case (gs_ctrl1) 

                  2'd1:                   begin
                     shift_reg_CE = 1'b1;
                  end
                  
                  2'd2:                   begin
                     if (fir_LessThan_1U_10_4_10_out1) begin
                        shift_reg_CE = 1'b1;
                     end
                     else begin
                        shift_reg_CE = 1'b0;
                     end
                  end
                  
                  default:                   begin
                     shift_reg_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl2)
          begin :drive_shift_reg_RW
            if (stall0) begin
               shift_reg_RW = 1'b0;
            end
            else begin
               if (gs_ctrl2) begin
                  shift_reg_RW = 1'b1;
               end
               else begin
                  shift_reg_RW = 1'b0;
               end
            end
         end

         // resource: mux_3bx2i1c
         always @(s_reg_19 or gs_ctrl3)
          begin :drive_fir_Add_3U_4_4_8_in1
            if (gs_ctrl3) begin
               fir_Add_3U_4_4_8_in1 = s_reg_19;
            end
            else begin
               fir_Add_3U_4_4_8_in1 = 3'd0;
            end
         end

         // instance: drive_fir_Add_3U_4_4_9_in1
         assign fir_Add_3U_4_4_9_in1 = s_reg_19;

         // resource: mux_3bx2i1c
         always @(sreg_1[2:0] or gs_ctrl4)
          begin :drive_fir_Add_3Ux1U_4U_4_11_in2
            if (gs_ctrl4) begin
               fir_Add_3Ux1U_4U_4_11_in2 = sreg_1[2:0];
            end
            else begin
               fir_Add_3Ux1U_4U_4_11_in2 = 3'd0;
            end
         end

         // instance: drive_fir_Add_3Ux1U_4U_4_11_in1
         assign fir_Add_3Ux1U_4U_4_11_in1 = 1'b1;

         // resource: regr_en_4
         always @(posedge clk)
          begin :drive_sreg_1
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd12, 4'd14:                      begin
                        sreg_1 <= fir_Add_3Ux1U_4U_4_11_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_sc_4
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               global_state <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_4bx4i3c
         always @(fir_LessThan_1U_10_4_10_out1 or sreg_1[3] or global_state)
          begin :drive_global_state_next
            case (global_state) 

               4'd08, 4'd15:                begin
                  global_state_next = 4'd09;
               end
               
               4'd10:                begin
                  if (fir_LessThan_1U_10_4_10_out1) begin
                     global_state_next = 4'd09;
                  end
                  else begin
                     global_state_next = global_state + 4'd01;
                  end
               end
               
               4'd12, 4'd14:                begin
                  global_state_next = 4'd13;
               end
               
               4'd13:                begin
                  if (sreg_1[3]) begin
                     global_state_next = 4'd15;
                  end
                  else begin
                     global_state_next = global_state + 4'd01;
                  end
               end
               
               default:                begin
                  global_state_next = global_state + 4'd01;
               end
               
            endcase

         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd09:                         begin
                           gs_ctrl0 <= 2'd1;
                        end
                        
                        4'd11:                         begin
                           gs_ctrl0 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_ss_sc_2
         always @(posedge clk)
          begin :drive_gs_ctrl1
            if (rst == 1'b0) begin
               gs_ctrl1 <= 2'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd00, 4'd01, 4'd02, 4'd03, 4'd04, 4'd05, 4'd06, 4'd07, 4'd08, 4'd09, 4'd11, 4'd12, 4'd14, 4'd15:                         begin
                           gs_ctrl1 <= 2'd1;
                        end
                        
                        4'd10:                         begin
                           gs_ctrl1 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge clk)
          begin :drive_gs_ctrl2
            if (rst == 1'b0) begin
               gs_ctrl2 <= 1'b1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd00, 4'd01, 4'd02, 4'd03, 4'd04, 4'd05, 4'd06, 4'd07, 4'd09, 4'd11:                         begin
                           gs_ctrl2 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge clk)
          begin :drive_gs_ctrl3
            if (rst == 1'b0) begin
               gs_ctrl3 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd10:                         begin
                           gs_ctrl3 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge clk)
          begin :drive_gs_ctrl4
            if (rst == 1'b0) begin
               gs_ctrl4 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd14:                         begin
                           gs_ctrl4 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_din_busy
         assign din_busy = fir_gen_busy_r_1_2_out1[2];

         // instance: drive_fir_gen_busy_r_1_2_in1
         assign fir_gen_busy_r_1_2_in1 = din_vld;

         // instance: drive_fir_gen_busy_r_1_2_in2
         assign fir_gen_busy_r_1_2_in2 = din_m_busy_req_0;

         // instance: drive_fir_gen_busy_r_1_2_in3
         assign fir_gen_busy_r_1_2_in3 = din_m_unvalidated_req;

         // resource: regr_ss_1
         always @(posedge clk)
          begin :drive_din_m_unvalidated_req
            if (rst == 1'b0) begin
               din_m_unvalidated_req <= 1'd1;
            end
            else begin
               din_m_unvalidated_req <= fir_N_Muxb_1_2_11_4_1_out1;
            end
         end

         // instance: drive_dout_vld
         assign dout_vld = fir_Or_1Ux1U_1U_4_5_out1;

         // instance: drive_fir_Or_1Ux1U_1U_4_5_in2
         assign fir_Or_1Ux1U_1U_4_5_in2 = dout_m_unacked_req;

         // resource: regr_sc_1
         always @(posedge clk)
          begin :drive_dout_m_unacked_req
            if (rst == 1'b0) begin
               dout_m_unacked_req <= 1'd0;
            end
            else begin
               dout_m_unacked_req <= fir_And_1Ux1U_1U_1_6_out1;
            end
         end

         // instance: drive_fir_And_1Ux1U_1U_1_6_in2
         assign fir_And_1Ux1U_1U_1_6_in2 = dout_busy;

         // instance: drive_fir_And_1Ux1U_1U_1_6_in1
         assign fir_And_1Ux1U_1U_1_6_in1 = dout_vld;

         // instance: drive_fir_Xor_1Ux1U_1U_1_4_in2
         assign fir_Xor_1Ux1U_1U_1_4_in2 = dout_m_req_m_trig_req;

         // instance: drive_fir_Xor_1Ux1U_1U_1_4_in1
         assign fir_Xor_1Ux1U_1U_1_4_in1 = dout_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge clk)
          begin :drive_dout_m_req_m_prev_trig_req
            if (rst == 1'b0) begin
               dout_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               dout_m_req_m_prev_trig_req <= dout_m_req_m_trig_req;
            end
         end


endmodule


